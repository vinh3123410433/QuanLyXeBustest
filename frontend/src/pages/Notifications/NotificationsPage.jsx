import React, { useState, useEffect } from 'react';

const NotificationsPage = () => {
  const [notifications, setNotifications] = useState([]);
  const [filter, setFilter] = useState('all');
  const [selectedNotifications, setSelectedNotifications] = useState([]);
  const [isCreating, setIsCreating] = useState(false);
  const [newNotification, setNewNotification] = useState({
    title: '',
    message: '',
    type: 'info',
    recipients: 'all',
    priority: 'normal',
    scheduledTime: ''
  });

  // Demo notifications data
  useEffect(() => {
    const demoNotifications = [
      {
        id: 1,
        title: 'Xe bu√Ωt BUS-001 ƒë√£ ƒë·∫øn ƒëi·ªÉm B·∫øn Th√†nh',
        message: 'Con b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë√≥n t·∫°i ƒëi·ªÉm B·∫øn xe B·∫øn Th√†nh l√∫c 7:15 AM. Xe ƒëang tr√™n ƒë∆∞·ªùng ƒë·∫øn tr∆∞·ªùng.',
        type: 'pickup',
        priority: 'high',
        recipients: ['Nguy·ªÖn Th·ªã A', 'Tr·∫ßn VƒÉn B'],
        createdAt: '2024-10-04T07:15:00',
        status: 'sent',
        readBy: 1,
        totalRecipients: 2,
        channel: ['sms', 'app']
      },
      {
        id: 2,
        title: 'Th√¥ng b√°o thay ƒë·ªïi l·ªãch tr√¨nh',
        message: 'Do s·ª≠a ch·ªØa ƒë∆∞·ªùng, tuy·∫øn Qu·∫≠n 1 - Qu·∫≠n 7 s·∫Ω thay ƒë·ªïi l·ªô tr√¨nh t·ª´ ng√†y mai. Th·ªùi gian ƒë√≥n tr·∫£ kh√¥ng ƒë·ªïi.',
        type: 'schedule',
        priority: 'normal',
        recipients: 'all',
        createdAt: '2024-10-04T06:30:00',
        status: 'sent',
        readBy: 15,
        totalRecipients: 25,
        channel: ['sms', 'app', 'email']
      },
      {
        id: 3,
        title: 'Xe bu√Ωt BUS-002 b·ªã tr·ªÖ 15 ph√∫t',
        message: 'Xe bu√Ωt BUS-002 tuy·∫øn Th·ªß ƒê·ª©c - Qu·∫≠n 3 ƒëang b·ªã tr·ªÖ 15 ph√∫t do t·∫Øc ƒë∆∞·ªùng. D·ª± ki·∫øn ƒë·∫øn ƒëi·ªÉm ƒë√≥n l√∫c 7:45 AM.',
        type: 'delay',
        priority: 'high',
        recipients: ['L√™ Th·ªã C', 'Ph·∫°m VƒÉn D', 'Ho√†ng Th·ªã E'],
        createdAt: '2024-10-04T07:30:00',
        status: 'sent',
        readBy: 2,
        totalRecipients: 3,
        channel: ['app', 'sms']
      },
      {
        id: 4,
        title: 'B·∫£o tr√¨ xe bu√Ωt ƒë·ªãnh k·ª≥',
        message: 'Xe bu√Ωt BUS-003 s·∫Ω ƒë∆∞·ª£c b·∫£o tr√¨ ƒë·ªãnh k·ª≥ v√†o Ch·ªß nh·∫≠t tu·∫ßn sau. C√°c chuy·∫øn ƒëi s·∫Ω ƒë∆∞·ª£c thay th·∫ø b·∫±ng xe kh√°c.',
        type: 'maintenance',
        priority: 'normal',
        recipients: 'all',
        createdAt: '2024-10-03T18:00:00',
        status: 'scheduled',
        readBy: 0,
        totalRecipients: 30,
        scheduledTime: '2024-10-05T08:00:00',
        channel: ['email', 'app']
      },
      {
        id: 5,
        title: 'Ho√†n th√†nh chuy·∫øn ƒëi an to√†n',
        message: 'Con b·∫°n ƒë√£ ƒë∆∞·ª£c tr·∫£ an to√†n t·∫°i ƒëi·ªÉm Tr∆∞·ªùng THCS ABC l√∫c 7:45 AM. C·∫£m ∆°n qu√Ω ph·ª• huynh ƒë√£ tin t∆∞·ªüng d·ªãch v·ª•.',
        type: 'dropoff',
        priority: 'normal',
        recipients: ['Nguy·ªÖn Th·ªã A'],
        createdAt: '2024-10-04T07:45:00',
        status: 'sent',
        readBy: 1,
        totalRecipients: 1,
        channel: ['app', 'sms']
      }
    ];

    const filtered = filter === 'all' 
      ? demoNotifications 
      : demoNotifications.filter(n => n.type === filter);
    
    setNotifications(filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)));
  }, [filter]);

  const handleSelectNotification = (id) => {
    setSelectedNotifications(prev => 
      prev.includes(id) 
        ? prev.filter(item => item !== id)
        : [...prev, id]
    );
  };

  const handleSelectAll = () => {
    setSelectedNotifications(
      selectedNotifications.length === notifications.length 
        ? [] 
        : notifications.map(n => n.id)
    );
  };

  const handleDeleteSelected = () => {
    if (selectedNotifications.length === 0) return;
    
    if (confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ${selectedNotifications.length} th√¥ng b√°o ƒë√£ ch·ªçn?`)) {
      setNotifications(prev => prev.filter(n => !selectedNotifications.includes(n.id)));
      setSelectedNotifications([]);
      alert('ƒê√£ x√≥a th√¥ng b√°o th√†nh c√¥ng!');
    }
  };

  const handleCreateNotification = () => {
    if (!newNotification.title || !newNotification.message) {
      alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß ti√™u ƒë·ªÅ v√† n·ªôi dung!');
      return;
    }

    const notification = {
      id: Math.max(...notifications.map(n => n.id)) + 1,
      ...newNotification,
      createdAt: new Date().toISOString(),
      status: newNotification.scheduledTime ? 'scheduled' : 'sent',
      readBy: 0,
      totalRecipients: newNotification.recipients === 'all' ? 25 : 1,
      channel: ['app', 'sms']
    };

    setNotifications([notification, ...notifications]);
    setNewNotification({
      title: '',
      message: '',
      type: 'info',
      recipients: 'all',
      priority: 'normal',
      scheduledTime: ''
    });
    setIsCreating(false);
    alert('ƒê√£ t·∫°o th√¥ng b√°o th√†nh c√¥ng!');
  };

  const getNotificationIcon = (type) => {
    switch (type) {
      case 'pickup': return 'üöå';
      case 'dropoff': return 'üè´';
      case 'delay': return '‚è∞';
      case 'schedule': return 'üìÖ';
      case 'maintenance': return 'üîß';
      case 'emergency': return 'üö®';
      case 'info': return '‚ÑπÔ∏è';
      default: return 'üì¢';
    }
  };

  const getNotificationColor = (type, priority) => {
    if (priority === 'high') return 'border-l-red-500 bg-red-50';
    
    switch (type) {
      case 'pickup': return 'border-l-blue-500 bg-blue-50';
      case 'dropoff': return 'border-l-green-500 bg-green-50';
      case 'delay': return 'border-l-yellow-500 bg-yellow-50';
      case 'schedule': return 'border-l-purple-500 bg-purple-50';
      case 'maintenance': return 'border-l-orange-500 bg-orange-50';
      case 'emergency': return 'border-l-red-500 bg-red-50';
      default: return 'border-l-gray-500 bg-gray-50';
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'sent': return 'bg-green-100 text-green-800';
      case 'scheduled': return 'bg-yellow-100 text-yellow-800';
      case 'failed': return 'bg-red-100 text-red-800';
      case 'draft': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'sent': return 'ƒê√£ g·ª≠i';
      case 'scheduled': return 'ƒê√£ l√™n l·ªãch';
      case 'failed': return 'G·ª≠i th·∫•t b·∫°i';
      case 'draft': return 'Nh√°p';
      default: return status;
    }
  };

  const formatTime = (dateString) => {
    return new Date(dateString).toLocaleString('vi-VN');
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 flex items-center space-x-3">
            <span>üì¢</span>
            <span>Qu·∫£n l√Ω th√¥ng b√°o</span>
          </h1>
          <p className="text-gray-600 mt-1">G·ª≠i th√¥ng b√°o ƒë·∫øn ph·ª• huynh v√† h·ªçc sinh</p>
        </div>
        
        <div className="flex space-x-3">
          {selectedNotifications.length > 0 && (
            <button
              onClick={handleDeleteSelected}
              className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium transition-colors flex items-center space-x-2"
            >
              <span>üóëÔ∏è</span>
              <span>X√≥a ({selectedNotifications.length})</span>
            </button>
          )}
          
          <button
            onClick={() => setIsCreating(true)}
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors flex items-center space-x-2"
          >
            <span>‚ûï</span>
            <span>T·∫°o th√¥ng b√°o</span>
          </button>
        </div>
      </div>

      {/* Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white p-6 rounded-lg shadow-md">
          <div className="flex items-center">
            <div className="p-3 bg-blue-100 rounded-full">
              <span className="text-2xl">üì¢</span>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">T·ªïng th√¥ng b√°o</p>
              <p className="text-2xl font-bold text-gray-900">{notifications.length}</p>
            </div>
          </div>
        </div>
        
        <div className="bg-white p-6 rounded-lg shadow-md">
          <div className="flex items-center">
            <div className="p-3 bg-green-100 rounded-full">
              <span className="text-2xl">‚úÖ</span>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">ƒê√£ g·ª≠i</p>
              <p className="text-2xl font-bold text-gray-900">
                {notifications.filter(n => n.status === 'sent').length}
              </p>
            </div>
          </div>
        </div>
        
        <div className="bg-white p-6 rounded-lg shadow-md">
          <div className="flex items-center">
            <div className="p-3 bg-yellow-100 rounded-full">
              <span className="text-2xl">‚è∞</span>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">ƒê√£ l√™n l·ªãch</p>
              <p className="text-2xl font-bold text-gray-900">
                {notifications.filter(n => n.status === 'scheduled').length}
              </p>
            </div>
          </div>
        </div>
        
        <div className="bg-white p-6 rounded-lg shadow-md">
          <div className="flex items-center">
            <div className="p-3 bg-purple-100 rounded-full">
              <span className="text-2xl">üìä</span>
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-500">T·ª∑ l·ªá ƒë·ªçc</p>
              <p className="text-2xl font-bold text-gray-900">
                {Math.round((notifications.reduce((sum, n) => sum + n.readBy, 0) / 
                  notifications.reduce((sum, n) => sum + n.totalRecipients, 0)) * 100 || 0)}%
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="bg-white p-6 rounded-lg shadow-md">
        <div className="flex flex-wrap items-center gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Lo·∫°i th√¥ng b√°o</label>
            <select
              value={filter}
              onChange={(e) => setFilter(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="all">T·∫•t c·∫£</option>
              <option value="pickup">ƒê√≥n h·ªçc sinh</option>
              <option value="dropoff">Tr·∫£ h·ªçc sinh</option>
              <option value="delay">Tr·ªÖ gi·ªù</option>
              <option value="schedule">L·ªãch tr√¨nh</option>
              <option value="maintenance">B·∫£o tr√¨</option>
              <option value="emergency">Kh·∫©n c·∫•p</option>
              <option value="info">Th√¥ng tin</option>
            </select>
          </div>
          
          <div className="flex items-end">
            <button
              onClick={() => window.location.reload()}
              className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg font-medium transition-colors"
            >
              üîÑ L√†m m·ªõi
            </button>
          </div>
        </div>
      </div>

      {/* Notifications List */}
      <div className="bg-white rounded-lg shadow-md">
        <div className="px-6 py-4 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold text-gray-800">Danh s√°ch th√¥ng b√°o</h3>
            <div className="flex items-center space-x-4">
              <label className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  checked={selectedNotifications.length === notifications.length && notifications.length > 0}
                  onChange={handleSelectAll}
                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span className="text-sm text-gray-600">Ch·ªçn t·∫•t c·∫£</span>
              </label>
            </div>
          </div>
        </div>
        
        <div className="divide-y divide-gray-200">
          {notifications.map((notification) => (
            <div
              key={notification.id}
              className={`p-6 border-l-4 ${getNotificationColor(notification.type, notification.priority)} hover:bg-gray-50 transition-colors`}
            >
              <div className="flex items-start space-x-4">
                <input
                  type="checkbox"
                  checked={selectedNotifications.includes(notification.id)}
                  onChange={() => handleSelectNotification(notification.id)}
                  className="mt-2 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                
                <div className="text-3xl">
                  {getNotificationIcon(notification.type)}
                </div>
                
                <div className="flex-1">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <h4 className="text-lg font-semibold text-gray-900 mb-2">
                        {notification.title}
                      </h4>
                      <p className="text-gray-700 mb-3 leading-relaxed">
                        {notification.message}
                      </p>
                    </div>
                    
                    <div className="ml-4 text-right">
                      <span className={`inline-flex px-3 py-1 text-xs font-semibold rounded-full ${getStatusColor(notification.status)}`}>
                        {getStatusText(notification.status)}
                      </span>
                    </div>
                  </div>
                  
                  <div className="flex items-center justify-between text-sm text-gray-500">
                    <div className="flex items-center space-x-4">
                      <span>üìÖ {formatTime(notification.createdAt)}</span>
                      {notification.scheduledTime && (
                        <span>‚è∞ L√™n l·ªãch: {formatTime(notification.scheduledTime)}</span>
                      )}
                      <span>üë• {notification.readBy}/{notification.totalRecipients} ƒë√£ ƒë·ªçc</span>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      {notification.channel?.map((channel) => (
                        <span
                          key={channel}
                          className="px-2 py-1 bg-gray-200 text-gray-700 rounded text-xs"
                        >
                          {channel === 'sms' ? 'üì± SMS' : 
                           channel === 'app' ? 'üì≤ App' : 
                           channel === 'email' ? 'üìß Email' : channel}
                        </span>
                      ))}
                    </div>
                  </div>
                  
                  {notification.priority === 'high' && (
                    <div className="mt-2">
                      <span className="inline-flex items-center px-2 py-1 bg-red-100 text-red-800 text-xs font-medium rounded">
                        üî¥ ∆Øu ti√™n cao
                      </span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
        
        {notifications.length === 0 && (
          <div className="text-center py-12">
            <span className="text-6xl">üì¢</span>
            <p className="text-gray-500 text-lg mt-4">Kh√¥ng c√≥ th√¥ng b√°o n√†o</p>
            <button
              onClick={() => setIsCreating(true)}
              className="mt-4 bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg"
            >
              T·∫°o th√¥ng b√°o ƒë·∫ßu ti√™n
            </button>
          </div>
        )}
      </div>

      {/* Create Notification Modal */}
      {isCreating && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 w-full max-w-lg max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-gray-900">T·∫°o th√¥ng b√°o m·ªõi</h3>
              <button
                onClick={() => setIsCreating(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                ‚úï
              </button>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Ti√™u ƒë·ªÅ *</label>
                <input
                  type="text"
                  value={newNotification.title}
                  onChange={(e) => setNewNotification({...newNotification, title: e.target.value})}
                  placeholder="Nh·∫≠p ti√™u ƒë·ªÅ th√¥ng b√°o..."
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">N·ªôi dung *</label>
                <textarea
                  value={newNotification.message}
                  onChange={(e) => setNewNotification({...newNotification, message: e.target.value})}
                  placeholder="Nh·∫≠p n·ªôi dung th√¥ng b√°o..."
                  rows={4}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                />
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Lo·∫°i th√¥ng b√°o</label>
                  <select
                    value={newNotification.type}
                    onChange={(e) => setNewNotification({...newNotification, type: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="info">Th√¥ng tin</option>
                    <option value="pickup">ƒê√≥n h·ªçc sinh</option>
                    <option value="dropoff">Tr·∫£ h·ªçc sinh</option>
                    <option value="delay">Tr·ªÖ gi·ªù</option>
                    <option value="schedule">L·ªãch tr√¨nh</option>
                    <option value="maintenance">B·∫£o tr√¨</option>
                    <option value="emergency">Kh·∫©n c·∫•p</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">M·ª©c ƒë·ªô ∆∞u ti√™n</label>
                  <select
                    value={newNotification.priority}
                    onChange={(e) => setNewNotification({...newNotification, priority: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="normal">B√¨nh th∆∞·ªùng</option>
                    <option value="high">Cao</option>
                  </select>
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Ng∆∞·ªùi nh·∫≠n</label>
                <select
                  value={newNotification.recipients}
                  onChange={(e) => setNewNotification({...newNotification, recipients: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">T·∫•t c·∫£ ph·ª• huynh</option>
                  <option value="route1">Tuy·∫øn B·∫øn Th√†nh - S√¢n Bay</option>
                  <option value="route2">Tuy·∫øn Qu·∫≠n 1 - Qu·∫≠n 7</option>
                  <option value="route3">Tuy·∫øn Th·ªß ƒê·ª©c - Qu·∫≠n 3</option>
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">L√™n l·ªãch g·ª≠i (t√πy ch·ªçn)</label>
                <input
                  type="datetime-local"
                  value={newNotification.scheduledTime}
                  onChange={(e) => setNewNotification({...newNotification, scheduledTime: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                />
                <p className="text-xs text-gray-500 mt-1">ƒê·ªÉ tr·ªëng ƒë·ªÉ g·ª≠i ngay l·∫≠p t·ª©c</p>
              </div>
            </div>
            
            <div className="flex space-x-3 mt-6">
              <button
                onClick={() => setIsCreating(false)}
                className="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 py-2 px-4 rounded-lg font-medium transition-colors"
              >
                H·ªßy
              </button>
              <button
                onClick={handleCreateNotification}
                className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg font-medium transition-colors"
              >
                {newNotification.scheduledTime ? 'L√™n l·ªãch g·ª≠i' : 'G·ª≠i ngay'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default NotificationsPage;